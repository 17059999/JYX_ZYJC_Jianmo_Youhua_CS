trigger: none

variables:
  - group: Build Variables
  - group: External Repo Variables
  - name: build.ptfBuildPipelineName
    value: PTF_DotNetCore_Build

stages:
  - stage: Build_And_Sign_PTF
    pool:
      vmImage: windows-2022
    jobs:
      - job:
        displayName: Sign PTF
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - checkout: self

          - task: PowerShell@2
            displayName: "Queue PTF Build"
            inputs:
              targetType: filePath
              filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Queue-SinglePipelineWithParameters.ps1"
              arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -PipelineName "$(build.ptfBuildPipelineName)" -TargetRepoBranch "$(build.ptfBranch)" -BuildIdVariableName "build.upstreamBuildId"'
              workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
            condition: succeeded()

          - task: PowerShell@2
            displayName: "Wait PTF Build Completion"
            inputs:
              targetType: filePath
              filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Wait-SinglePipelineCompletionByBuildId.ps1"
              arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -BuildId "$(build.upstreamBuildId)"'
              workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
            condition: succeeded()

          - task: PowerShell@2
            displayName: "Get PTF Archive"
            inputs:
              targetType: filePath
              filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Get-DotNetCoreArtifactByBuildId.ps1"
              arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -BuildId "$(build.upstreamBuildId)" -FileExtension ".nupkg" -UpstreamFileNameVariableName "build.upstreamArchiveName" -ArtifactLocalPath "$(Build.ArtifactStagingDirectory)/staging"'
              workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
            condition: succeeded()

          - task: PowerShell@2
            displayName: "Expand PTF Archive"
            inputs:
              targetType: filePath
              filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Expand-DotNetCoreZipArchive.ps1"
              arguments: '-ArchiveName "$(build.upstreamArchiveName)" -ArchiveExtension ".nupkg" -ArtifactLocalPath "$(Build.ArtifactStagingDirectory)/staging"'
              workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
            condition: succeeded()

          - task: PowerShell@2
            displayName: "Get Files to be Signed"
            inputs:
              targetType: filePath
              filePath: "$(Build.Repository.LocalPath)/CodeSign/Get-CodeSigningFiles.ps1"
              arguments: '-ExpandedArchivePath "$(Build.ArtifactStagingDirectory)/staging/$(build.upstreamArchiveName)" -CodeSigningFilesPath "./PTFCodeSigningFiles.json"'
              workingDirectory: "$(Build.Repository.LocalPath)/CodeSign"
            condition: succeeded()

          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@2
            displayName: "ESRP CodeSigning - Binaries"
            inputs:
              ConnectedServiceName: "ESRP for Windows Protocol Test Suites"
              FolderPath: "$(Build.ArtifactStagingDirectory)/staging/$(build.upstreamArchiveName)"
              Pattern: "$(codeSign.codeSigningFiles)"
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolSign",
                    "Parameters":
                      {
                        "OpusName": "Microsoft",
                        "OpusInfo": "http://www.microsoft.com",
                        "FileDigest": '/fd "SHA256"',
                        "PageHash": "/NPH",
                        "TimeStamp": '/tr "http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer" /td sha256'
                      },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  },
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolVerify",
                    "Parameters": {},
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  }
                ]
            condition: succeeded()

          - task: PowerShell@2
            displayName: "ESRP CodeSigning Verification"
            inputs:
              targetType: filePath
              filePath: "$(Build.Repository.LocalPath)/CodeSign/Verify-ExpandedDotNetCoreArchive.ps1"
              arguments: '-ArchiveName "$(build.upstreamArchiveName)" -ArchiveExtension ".nupkg" -ExpandedArchivePath "$(Build.ArtifactStagingDirectory)/staging/$(build.upstreamArchiveName)" -CodeSigningFilesPath "./PTFCodeSigningFiles.json" -SignerSubject "$(codeSign.signerSubject)" -ReportRootPath "$(Build.ArtifactStagingDirectory)/drop"'
              workingDirectory: "$(Build.Repository.LocalPath)/CodeSign"
            condition: succeeded()

          - task: ArchiveFiles@2
            displayName: "Archive as NuGet Package for PTF"
            inputs:
              rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/staging/$(build.upstreamArchiveName)"
              includeRootFolder: false
              archiveFile: "$(Build.ArtifactStagingDirectory)/drop/$(build.upstreamArchiveName).nupkg"
            condition: succeeded()

          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@2
            displayName: "ESRP CodeSigning - NuGet Package"
            inputs:
              ConnectedServiceName: "ESRP for Windows Protocol Test Suites"
              FolderPath: "$(Build.ArtifactStagingDirectory)/drop"
              Pattern: "$(build.upstreamArchiveName).nupkg"
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                  {
                      "KeyCode": "CP-401405",
                      "OperationCode": "NuGetSign",
                      "Parameters": {},
                      "ToolName": "sign",
                      "ToolVersion": "1.0"
                  },
                  {
                      "KeyCode": "CP-401405",
                      "OperationCode": "NuGetVerify",
                      "Parameters": {},
                      "ToolName": "sign",
                      "ToolVersion": "1.0"
                  }
                ]
            condition: succeeded()

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifacts"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/drop"
            condition: succeeded()

          - task: NuGetToolInstaller@1
            displayName: "Install NuGet"
            inputs:
              versionSpec: '6.4.0'

          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: "Verify PTF Package Signature"
            inputs:
              command: custom
              arguments: 'verify "$(Build.ArtifactStagingDirectory)/drop/$(build.upstreamArchiveName).nupkg" -Signatures -CertificateFingerprint $(codeSign.ptfCertThumbprint) -Verbosity Detailed'
            condition: succeeded()

          - task: PowerShell@2
            displayName: "Verify Report Status"
            inputs:
              targetType: inline
              script: |
                Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/drop" -Filter "*.CodeSignVerification.html" | Foreach-Object { ./Check-HtmlReport.ps1 -ReportPath $_.FullName }
              workingDirectory: "$(Build.Repository.LocalPath)/CodeSign"
            condition: succeeded()

  - stage: Build_And_Sign_Test_Suites
    pool:
      vmImage: windows-2022
    dependsOn: Build_And_Sign_PTF
    condition: and(succeeded(), eq(variables['test.runRegression'], true))
    jobs:
      - job:
        displayName: Sign FileServer
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuite-cs.yml
            parameters:
              build.buildPipelineParameters: '`"build.usePublicPtf`": `"false`", `"build.ptfBuildId`": `"$(Build.BuildId)`"'
              build.buildPipelineName: "FileServer_DotNetCore_Build"
              build.targetRepoBranch: $(build.testSuitesBranch)
              build.upstreamBuildIdVariableName: "build.fsBuildId"
              build.archiveName: "FileServer-TestSuite-ServerEP"
              codeSign.productName: $(codeSign.testSuitesProductName)

      - job:
        displayName: Sign MS-SMBD
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuite-cs.yml
            parameters:
              build.buildPipelineParameters: '`"build.usePublicPtf`": `"false`", `"build.ptfBuildId`": `"$(Build.BuildId)`"'
              build.buildPipelineName: "MS-SMBD_DotNetCore_Build"
              build.targetRepoBranch: $(build.testSuitesBranch)
              build.upstreamBuildIdVariableName: "build.smbdBuildId"
              build.archiveName: "MS-SMBD-TestSuite-ServerEP"
              codeSign.productName: $(codeSign.testSuitesProductName)

      - job:
        displayName: Sign RDPServer
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuite-cs.yml
            parameters:
              build.buildPipelineParameters: '`"build.usePublicPtf`": `"false`", `"build.ptfBuildId`": `"$(Build.BuildId)`"'
              build.buildPipelineName: "RDPServer_DotNetCore_Build"
              build.targetRepoBranch: $(build.testSuitesBranch)
              build.upstreamBuildIdVariableName: "build.rdpServerBuildId"
              build.archiveName: "RDP-TestSuite-ServerEP"
              codeSign.productName: $(codeSign.testSuitesProductName)

      - job: Sign_RDPClient
        displayName: Sign RDPClient
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuite-cs.yml
            parameters:
              build.buildPipelineParameters: '`"build.usePublicPtf`": `"false`", `"build.ptfBuildId`": `"$(Build.BuildId)`"'
              build.buildPipelineName: "RDPClient_DotNetCore_Build"
              build.targetRepoBranch: $(build.testSuitesBranch)
              build.upstreamBuildIdVariableName: "build.rdpClientBuildId"
              build.archiveName: "RDP-TestSuite-ClientEP"
              codeSign.productName: $(codeSign.testSuitesProductName)

      - job:
        displayName: Sign MS-WSP
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuite-cs.yml
            parameters:
              build.buildPipelineParameters: '`"build.usePublicPtf`": `"false`", `"build.ptfBuildId`": `"$(Build.BuildId)`"'
              build.buildPipelineName: "MS-WSP_DotNetCore_Build"
              build.targetRepoBranch: $(build.testSuitesBranch)
              build.upstreamBuildIdVariableName: "build.msWspBuildId"
              build.archiveName: "MS-WSP-TestSuite-ServerEP"
              codeSign.productName: $(codeSign.testSuitesProductName)

  - stage: Publish_Extra_Artifacts
    pool:
      vmImage: windows-2022
    dependsOn: Build_And_Sign_Test_Suites
    condition: succeeded()
    variables:
      build.rdpClientBuildId: $[stageDependencies.Build_And_Sign_Test_Suites.Sign_RDPClient.outputs['Queue_Test_Suite_Build.build.rdpClientBuildId']]
    jobs:
      - job:
        displayName: Publish Extra Artifacts
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - checkout: self
            path: "s"

          - checkout: git://$(testSuiteRepo.url)@$(build.testSuitesBranch)
            path: "s/ts"

          - task: PublishBuildArtifacts@1
            displayName: "Publish CommonScripts"
            inputs:
              PathtoPublish: "$(Build.Repository.LocalPath)/ts/CommonScripts"
              ArtifactName: CommonScripts
            condition: succeeded()

          - task: PowerShell@2
            displayName: "Get RDP SUT Control Agent Artifacts"
            inputs:
              targetType: filePath
              filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Get-DotNetCoreArtifactByBuildId.ps1"
              arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -BuildId "$(build.rdpClientBuildId)" -ArtifactName "RDPSUTControlAgent" -GetAllFiles $true -ArtifactLocalPath "$(Build.ArtifactStagingDirectory)/RDPSUTControlAgent"'
              workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
            condition: succeeded()

          - task: PublishBuildArtifacts@1
            displayName: "Publish RDP SUT Control Agent Artifacts"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/RDPSUTControlAgent"
              ArtifactName: RDPSUTControlAgent
            condition: succeeded()

  - stage: Queue_Regressions_For_Signed_Test_Suites
    pool:
      vmImage: windows-2022
    dependsOn: Publish_Extra_Artifacts
    condition: and(succeeded(), eq(variables['test.runRegression'], true))
    jobs:
      - job:
        displayName: Queue Regressions for FileServer
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuiteRegressions-cs.yml
            parameters:
              build.archiveName: "FileServer-TestSuite-ServerEP"
              test.regressionPipelineNames: "FileServer_Cluster_DotNetCore_Local_Regression;FileServer_Standard_DotNetCore_Local_Regression;FileServer_Cluster_DotNetCore_Azure_Regression;FileServer_Standard_DotNetCore_Azure_Regression;FileServer_LinuxSUT_DotNetCore_Azure_Regression"

      - job:
        displayName: Queue Regressions for MS-SMBD
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuiteRegressions-cs.yml
            parameters:
              build.archiveName: "MS-SMBD-TestSuite-ServerEP"
              test.regressionPipelineNames: "MS-SMBD_DotNetCore_Local_Regression"

      - job:
        displayName: Queue Regressions for RDPServer
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuiteRegressions-cs.yml
            parameters:
              build.archiveName: "RDP-TestSuite-ServerEP"
              test.regressionPipelineNames: "RDPServer_DotNetCore_Local_Regression;RDPServer_DotNetCore_Azure_Regression"

      - job:
        displayName: Queue Regressions for RDPClient
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuiteRegressions-cs.yml
            parameters:
              build.archiveName: "RDP-TestSuite-ClientEP"
              test.regressionPipelineNames: "RDPClient_CompressionDisable_DotNetCore_Local_Regression;RDPClient_CompressionEnable_DotNetCore_Local_Regression;RDPClient_SUTAdapter_DotNetCore_Local_Regression;RDPClient_DotNetCore_Azure_Regression"

      - job:
        displayName: Queue Regressions for MS-WSP
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - template: TestSuite-DotNetCore-SingleTestSuiteRegressions-cs.yml
            parameters:
              build.archiveName: "MS-WSP-TestSuite-ServerEP"
              test.regressionPipelineNames: "MS-WSP_DotNetCore_Local_Regression;MS-WSP_DotNetCore_Azure_Regression"
