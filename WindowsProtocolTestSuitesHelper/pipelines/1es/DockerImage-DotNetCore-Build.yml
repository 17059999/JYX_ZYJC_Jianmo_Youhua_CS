# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneESPT template
# If you are not using the E+D shared hosted pool with windows-2022, replace the pool section with your hosted pool, os, and image name. If you are using a Linux image, you must specify an additional windows image for SDL: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/overview#how-to-specify-a-windows-pool-for-the-sdl-source-analysis-stage
trigger: none
variables:
  - group: Build Variables
  - name: build.tsPipelineName
    value: TestSuitesDotNetCoreCodeSign
  - name: build.tsPipelineParameters
    value: '`"build.testSuitesBranch`": `"$(build.tsBranch)`", `"build.testSuiteName`": `"$(build.tsName)`"'
  - name: build.ptmCliPipelineName
    value: PTMCliDotNetCoreCodeSign
  - name: build.ptmCliPipelineParameters
    value: '`"build.testSuitesBranch`": `"$(build.tsBranch)`"'
  - name: build.ptmServicePipelineName
    value: PTMServiceDotNetCoreCodeSign
  - name: build.ptmServicePipelineParameters
    value: '`"build.testSuitesBranch`": `"$(build.tsBranch)`"'

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: ubuntu-2204
      os: linux

    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared
        image: windows-2022
        os: windows
    
    authenticatedContainerRegistries:
    - serviceConnection: $(docker.registryServiceConnection)

    customBuildTags:
    - ES365AIMigrationTooling

    stages:
    - stage: stage
      jobs:
      - job: ''
        displayName: Build Docker Image
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
        - checkout: self
  
        - task: CopyFiles@2
          displayName: "Copy Common Files to Target Folder"
          inputs:
            SourceFolder: "$(Build.Repository.LocalPath)/DockerFiles/Common"
            TargetFolder: "$(docker.dockerFileRoot)"
            OverWrite: true

        - task: PowerShell@2
          displayName: "Queue CodeSign Builds for $(build.tsName)"
          inputs:
            targetType: "inline"
            script: |
              Set-Location "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
              @(
                  @{
                      Name                = "$(build.tsPipelineName)"
                      Parameters          = "$(build.tsPipelineParameters)"
                      BuildIdVariableName = "build.tsBuildId"
                  }, 
                  @{
                      Name                = "$(build.ptmCliPipelineName)"
                      Parameters          = "$(build.ptmCliPipelineParameters)"
                      BuildIdVariableName = "build.ptmCliBuildId"
                  }, 
                  @{
                      Name                = "$(build.ptmServicePipelineName)"
                      Parameters          = "$(build.ptmServicePipelineParameters)"
                      BuildIdVariableName = "build.ptmServiceBuildId"
                  }
              ) | ForEach-Object {
                  ./Queue-SinglePipelineWithParameters.ps1 -AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -PipelineName $_.Name -PipelineParameters $_.Parameters -BuildIdVariableName $_.BuildIdVariableName
              }
          condition: and(succeeded(), eq(variables['build.runTsBuild'], true))

        - task: PowerShell@2
          displayName: "Wait CodeSign Builds for $(build.tsName)"
          inputs:
            targetType: "inline"
            script: |
              Set-Location "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
              @($(build.tsBuildId), $(build.ptmCliBuildId), $(build.ptmServiceBuildId)) | ForEach-Object {
                  ./Wait-SinglePipelineCompletionByBuildId.ps1 -AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -BuildId "$_"
              }
          condition: and(succeeded(), eq(variables['build.runTsBuild'], true))

        - task: PowerShell@2
          displayName: "Get Signed Archives from CodeSign Builds"
          inputs:
            targetType: inline
            script: |
              Set-Location "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
              @($(build.tsBuildId), $(build.ptmCliBuildId), $(build.ptmServiceBuildId)) | ForEach-Object {
                  $fileName = if ("$_" -eq "$(build.tsBuildId)") {
                      "$(build.archiveName)"
                  }
                  else {
                      ""
                  }
                  ./Get-DotNetCoreArtifactByBuildId.ps1 -AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -BuildId "$_" -FileName $fileName -FileExtension ".tar.gz" -ArtifactLocalPath "$(Build.ArtifactStagingDirectory)/staging"
              }
          condition: succeeded()
          
        - task: PowerShell@2
          displayName: "Move All Archives to Target Folder"
          inputs:
            targetType: inline
            script: |
              Move-Item "$(Build.ArtifactStagingDirectory)/staging/*.tar.gz" "$(docker.dockerFileRoot)" -Force
          condition: succeeded()
           
        - task: 1ES.BuildContainerImage@1
          displayName: Build Docker Image
          inputs:
            dockerfile: $(docker.dockerFileRoot)/$(docker.dockerFileName)
            path: $(docker.dockerFileRoot)
            image: $(image.repository):$(image.tag)
            enableNetwork: true
          condition: succeeded()

        - task: 1ES.PushContainerImage@1
          displayName: Push Docker Image
          inputs:
            image: $(image.repository):$(image.tag)
          condition: succeeded()