trigger: none

variables:
  - group: Build Variables
  - group: ESRP Variables
  - name: build.buildPipelineName
    value: PTMCli_DotNetCore_Build

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
      - stage: Build_And_Sign_PTMCli
        jobs:
          - job:
            displayName: Sign PTMCli
            workspace:
              clean: true
            timeoutInMinutes: 0
            steps:
              - checkout: self

              - task: PowerShell@2
                displayName: "Queue PTMCli Build"
                inputs:
                  targetType: filePath
                  filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Queue-SinglePipelineWithParameters.ps1"
                  arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -PipelineName "$(build.buildPipelineName)" -TargetRepoBranch "$(build.testSuitesBranch)" -BuildIdVariableName "build.upstreamBuildId"'
                  workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
                condition: succeeded()

              - task: PowerShell@2
                displayName: "Wait PTMCli Build Completion"
                inputs:
                  targetType: filePath
                  filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Wait-SinglePipelineCompletionByBuildId.ps1"
                  arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -BuildId "$(build.upstreamBuildId)"'
                  workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
                condition: succeeded()

              - task: PowerShell@2
                displayName: "Get PTMCli Archive"
                inputs:
                  targetType: filePath
                  filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Get-DotNetCoreArtifactByBuildId.ps1"
                  arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -BuildId "$(build.upstreamBuildId)" -FileName "$(build.archiveName)" -ArtifactLocalPath "$(Build.ArtifactStagingDirectory)/staging"'
                  workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
                condition: succeeded()

              - task: PowerShell@2
                displayName: "Expand PTMCli Archive"
                inputs:
                  targetType: filePath
                  filePath: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common/Expand-DotNetCoreZipArchive.ps1"
                  arguments: '-ArchiveName "$(build.archiveName)" -ArtifactLocalPath "$(Build.ArtifactStagingDirectory)/staging"'
                  workingDirectory: "$(Build.Repository.LocalPath)/RegressionRunScripts/Common"
                condition: succeeded()

              - task: PowerShell@2
                displayName: "Get Files to be Signed"
                inputs:
                  targetType: filePath
                  filePath: "$(Build.Repository.LocalPath)/CodeSign/Get-CodeSigningFiles.ps1"
                  arguments: '-ExpandedArchivePath "$(Build.ArtifactStagingDirectory)/staging/$(build.archiveName)" -ProductName "$(codeSign.productName)" -CodeSigningFilesPath "./PTMCliCodeSigningFiles.json"'
                  workingDirectory: "$(Build.Repository.LocalPath)/CodeSign"
                condition: succeeded()

              - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@5
                displayName: "ESRP CodeSigning"
                inputs:
                  ConnectedServiceName: '$(ConnectedServiceName)'
                  UseMSIAuthentication: true
                  AppRegistrationClientId: '$(AppRegistrationClientId)' 
                  AppRegistrationTenantId: '$(AppRegistrationTenantId)' 
                  EsrpClientId: "$(EsrpClientId)"
                  AuthAKVName: '$(AuthAKVName)' 
                  AuthSignCertName: '$(AuthSignCertName)'
                  FolderPath: "$(Build.ArtifactStagingDirectory)/staging/$(build.archiveName)"
                  Pattern: "$(codeSign.codeSigningFiles)"
                  SessionTimeout: 90 
                  ServiceEndpointUrl: '$(ServiceEndpointUrl)' 
                  MaxConcurrency: 25
                  signConfigType: inlineSignParams
                  inlineOperation: |
                    [
                      {
                        "KeyCode": "CP-230012",
                        "OperationCode": "SigntoolSign",
                        "Parameters":
                          {
                            "OpusName": "Microsoft",
                            "OpusInfo": "http://www.microsoft.com",
                            "FileDigest": '/fd "SHA256"',
                            "PageHash": "/NPH",
                            "TimeStamp": '/tr "http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer" /td sha256'
                          },
                        "ToolName": "sign",
                        "ToolVersion": "1.0"
                      },
                      {
                        "KeyCode": "CP-230012",
                        "OperationCode": "SigntoolVerify",
                        "Parameters": {},
                        "ToolName": "sign",
                        "ToolVersion": "1.0"
                      }
                    ]
                condition: succeeded()

              - task: PowerShell@2
                displayName: "ESRP CodeSigning Verification"
                inputs:
                  targetType: filePath
                  filePath: "$(Build.Repository.LocalPath)/CodeSign/Verify-ExpandedDotNetCoreArchive.ps1"
                  arguments: '-ArchiveName "$(build.archiveName)" -ExpandedArchivePath "$(Build.ArtifactStagingDirectory)/staging/$(build.archiveName)" -CodeSigningFilesPath "./PTMCliCodeSigningFiles.json" -SignerSubject "$(codeSign.signerSubject)" -ReportRootPath "$(Build.ArtifactStagingDirectory)/drop"'
                  workingDirectory: "$(Build.Repository.LocalPath)/CodeSign"
                condition: succeeded()

              - task: ArchiveFiles@2
                displayName: "Archive as Zip for PTMCli"
                inputs:
                  rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/staging/$(build.archiveName)"
                  includeRootFolder: false
                  archiveFile: "$(Build.ArtifactStagingDirectory)/drop/$(build.archiveName).zip"
                condition: succeeded()

              - task: 1ES.PublishBuildArtifacts@1
                displayName: "Publish Artifacts"
                inputs:
                  PathtoPublish: "$(Build.ArtifactStagingDirectory)/drop"
                condition: succeeded()

              - task: PowerShell@2
                displayName: "Verify Report Status"
                inputs:
                  targetType: inline
                  script: |
                    Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/drop" -Filter "*.CodeSignVerification.html" | Foreach-Object { ./Check-HtmlReport.ps1 -ReportPath $_.FullName }
                  workingDirectory: "$(Build.Repository.LocalPath)/CodeSign"
                condition: succeeded()

      - stage: Archive_PTMCli_For_Linux
        pool:
          name: Azure-Pipelines-1ESPT-ExDShared
          image: ubuntu-2204
          os: linux
        dependsOn: Build_And_Sign_PTMCli
        condition: succeeded()
        jobs:
          - job:
            displayName: Archive PTMCli as Tar
            workspace:
              clean: true
            timeoutInMinutes: 0
            steps:
              - template: /pipelines/1es/TestSuite-DotNetCore-TarArchive-cs.yml@self
                parameters:
                  build.archiveName: "PTMCli"
