using Bentley.Building.Mechanical;
using Bentley.Building.Mechanical.Api;
using Bentley.MstnPlatformNET;
using Bentley.GeometryNET;
using Bentley.DgnPlatformNET.Elements;
using Bentley.ECObjects.Instance;
using System;

//将dll文件放到OpenPlant Modeler CONNECT Edition\MdlSys\Required下可以实现自加载
namespace JYX_ZYJC_Jianmo_Youhua_CS
{
    [Bentley.MstnPlatformNET.AddIn(MdlTaskID = "JYX_ZYJC_Jianmo_Youhua_CS")]
    internal sealed class MyAddin : AddIn
    {
        public static MyAddin s_addin = null;
        private MyAddin(System.IntPtr mdlDesc) : base(mdlDesc)
        {
            s_addin = this;
        }
        protected override int Run(string[] commandLine)
        {
            //Bentley.Building.Mechanical.Api.BMECInstanceManager.SetConfigVariable("OPM_AUTOFITTING_COPY_STANDARD","false");
           
            BMECApi instance = BMECApi.Instance;
            instance.RegisterTool("MyLinearPlacementTool", new MyLinearPlacementTool(MechAddIn.Instance, 2000000000));
            Bentley.Building.Mechanical.Api.BMECApi bmecApiInstance = Bentley.Building.Mechanical.Api.BMECApi.Instance;
            MyPipeSupportPlacementTool myPipeSupportPlacementTool = new MyPipeSupportPlacementTool(MechAddIn.Instance, 1999999999);
            MyPipeAnchorPlacementTool myPipeAnchorPlacementTool = new MyPipeAnchorPlacementTool(MechAddIn.Instance, 1999999998);
            JYXValvePlacementTool valveTool = new JYXValvePlacementTool(MechAddIn.Instance, 1999999997);
            JYXCloupingPlacementTool cloupingTool = new JYXCloupingPlacementTool(MechAddIn.Instance, 1999999996);
            ReliefValveTool reliefvalvetool = new ReliefValveTool(MechAddIn.Instance, 1999999995);
            bmecApiInstance.RegisterTool("MyPipeSupportPlacementTool", myPipeSupportPlacementTool);
            bmecApiInstance.RegisterTool("MyPipeAnchorPlacementTool", myPipeAnchorPlacementTool);
            bmecApiInstance.RegisterTool("JYXValvePlacementTool", valveTool);
            bmecApiInstance.RegisterTool("JYXCloupingPlacementTool", cloupingTool);
            bmecApiInstance.RegisterTool("ReliefValveTool", reliefvalvetool);
            //s_addin = this;

            JYX_ZYJC_CLR.PublicMethod.display_pipe_level_info(Setting_Pipe_Display_Info_Form.xmlReade());

            //s_addin.ElementChangedEvent += S_addin_ElementChangedEvent;
            instance.PreGraphicsInstancePersistedEvent += Instance_PreGraphicsInstancePersistedEvent;
            //instance.PostGraphicsInstancePersistedEvent += Instance_PostGraphicsInstancePersistedEvent;
            //instance.SelectSetChangedEvent += Instance_SelectSetChangedEvent;
            //instance.LocatedObjectEvent += Instance_LocatedObjectEvent;
            //instance.PreNonGraphicsInstancePersistedEvent += Instance_PreNonGraphicsInstancePersistedEvent; ;
            return 0;
        }

        private void Instance_PreGraphicsInstancePersistedEvent(object @object, IECInstance instance, InstancePersistedReason reason)
        {
            BMECApi api = BMECApi.Instance;
            //throw new NotImplementedException();
            if (/*reason==InstancePersistedReason.Added||*/reason==InstancePersistedReason.Updated)
            {
                BMECObject bmec = new BMECObject(instance);
                //DPoint3d dp=bmec.GetNthPort(0).Location;
                //DPoint3d dp1 = bmec.GetNthPort(1).Location;
                DPoint3d dp1 = new DPoint3d();

                //bmec.Refresh();
                IECPropertyValue iECPropertyValue = instance.FindPropertyValue("TRANSFORMATION_MATRIX", true, true, false);
                DPoint3d dpoint = new DPoint3d();
                dpoint = bmec.Transform3d.Translation;
                double x = dpoint.X / 1000;
                string orgin_x = string.Format("{0:F}", x);

                double y = dpoint.Y / 1000;
                double z = dpoint.Z / 1000;
                string orgin_z = string.Format("{0:F}", z);
                string orgin_y = string.Format("{0:F}", y);
                if (bmec.Instance.GetPropertyValue("Origin_X")!=null)
                {
                    bmec.Instance["Origin_X"].StringValue = orgin_x+"mm";
                }
                if(bmec.Instance.GetPropertyValue("D_Coordinate_X")!=null)
                {
                    bmec.Instance["D_Coordinate_X"].StringValue = orgin_x + "mm";
                }
                if(bmec.Instance.GetPropertyValue("D_zuobiaoX")!=null)
                {
                    bmec.Instance["D_zuobiaoX"].StringValue = orgin_x + "mm";
                }
                if(bmec.Instance.GetPropertyValue("Origin_Y")!=null)
                {
                    bmec.Instance["Origin_Y"].StringValue = orgin_y+"mm";
                }
                if(bmec.Instance.GetPropertyValue("D_Coordinate_Y")!=null)
                {
                    bmec.Instance["D_Coordinate_Y"].StringValue = orgin_y + "mm";
                }
                if (bmec.Instance.GetPropertyValue("D_zuobiaoY") != null)
                {
                    bmec.Instance["D_zuobiaoY"].StringValue = orgin_y + "mm";
                }
                if (bmec.Instance.GetPropertyValue("Origin_Z")!=null)
                {
                    bmec.Instance["Origin_Z"].StringValue = orgin_z+"mm";
                }
                if(bmec.Instance.GetPropertyValue("D_Coordinate_Z")!=null)
                {
                    bmec.Instance["D_Coordinate_Z"].StringValue = orgin_z + "mm";
                }
                if (bmec.Instance.GetPropertyValue("D_zuobiaoZ") != null)
                {
                    bmec.Instance["D_zuobiaoZ"].StringValue = orgin_z + "mm";
                }
                if (bmec.Instance.GetPropertyValue("zhongxinbiaogao")!=null)
                {
                    bmec.Instance["zhongxinbiaogao"].StringValue = orgin_z + "mm";
                }
                if(bmec.Instance.GetPropertyValue("D_Valve_Center_Elevation")!=null)
                {
                    bmec.Instance["D_Valve_Center_Elevation"].StringValue = orgin_z + "mm";
                }
                if (bmec.Instance.GetPropertyValue("D_guanzhongxinbiaogao") != null)
                {
                    bmec.Instance["D_guanzhongxinbiaogao"].StringValue = orgin_z + "mm";
                }
                if (bmec.Instance.GetPropertyValue("D_guandingwaibiaogao") !=null)
                {
                    double od = bmec.Instance["OUTSIDE_DIAMETER"].DoubleValue;
                    double wall = bmec.Instance["WALL_THICKNESS"].DoubleValue;
                    double orginz = Convert.ToDouble(orgin_z);
                    //double topbiaogao = orgin_z + od + wall;
                    bmec.Instance["D_guandingwaibiaogao"].StringValue = (orginz + od + wall) + "mm";
                    if (bmec.Instance.GetPropertyValue("D_guandiwaibiaogao") != null)
                    {
                        bmec.Instance["D_guandiwaibiaogao"].StringValue = (orginz-od-wall) + "mm";
                    }
                    if(bmec.Instance.GetPropertyValue("D_guandineibiaogao") !=null)
                    {
                        bmec.Instance["D_guandineibiaogao"].StringValue = (orginz - od) + "mm";
                    }
                }
                try
                {
                    DPoint3d[] pointshuz = JYX_ZYJC_CLR.PublicMethod.get_two_port_object_end_points(bmec);
                    DVector3d dv_x = new DVector3d(1, 0, 0);
                    DVector3d dv_pipe = new DVector3d(pointshuz[0], pointshuz[1]);
                    double angle = dv_pipe.AngleTo(dv_x).Degrees;
                    string podu = string.Empty;
                    if(pointshuz[0].Z==pointshuz[1].Z)
                    {
                        podu = "0°";
                        angle = 0;
                    }
                    else
                    {
                        DPoint3d touy = new DPoint3d(pointshuz[1].X, pointshuz[1].Y, pointshuz[0].Z);
                        DVector3d touyin = new DVector3d(pointshuz[0], touy);
                        bool b = dv_pipe.IsPerpendicularTo(touyin);
                        if(b)
                        {
                            podu = "90°";
                            angle = 90;
                        }
                        else
                        {
                            double ra = dv_pipe.AngleTo(touyin).Radians;
                            angle = dv_pipe.AngleTo(touyin).Degrees;
                            double tan = Math.Tan(ra);
                            podu = (tan * 100) + "%";
                        }                        
                    }
                    if(bmec.Instance.GetPropertyValue("D_jiaodu") !=null)
                    {
                        bmec.Instance["D_jiaodu"].StringValue = angle + "°";
                    }
                    if(bmec.Instance.GetPropertyValue("D_podu") !=null)
                    {
                        bmec.Instance["D_podu"].StringValue = podu;
                    }
                }
                catch
                {

                }
                //bmec.Create();
            }
        }

    }
}
