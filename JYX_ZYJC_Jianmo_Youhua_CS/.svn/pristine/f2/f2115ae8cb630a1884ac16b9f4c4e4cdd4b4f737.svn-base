using Bentley.DgnPlatformNET.Elements;
using Bentley.MstnPlatformNET.WinForms;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace JYX_ZYJC_Jianmo_Youhua_CS
{
    /// <summary>
    /// 通过距离筛选孤立元素
    /// 通过连结性筛选孤立元素
    /// 通过距离和连结性筛选孤立元素
    /// 选择其中一行数据定位至该元素
    /// 选中多行元素将其从当前 Model 中移除
    /// 通过选择列头显示对应数据
    /// </summary>
    public partial class ElementClearForm :
#if DEBUG
                     Form
#else
                     Adapter
#endif
    {
        public static ElementClearForm instance = null;
        private double default_distance = 300;//默认孤立距离
        /// <summary>
        /// 列头名称
        /// </summary>
        public List<string> columnsName = new List<string>();
        /// <summary>
        /// 构造
        /// </summary>
        private ElementClearForm()
        {
            InitializeComponent();
            this.init();
            this.initColumsName();
        }
        public static ElementClearForm getInstance() {
            if (instance == null)
            {
                instance = new ElementClearForm();
            }
            return instance;
        }
        /// <summary>
        /// 组件初始化
        /// </summary>
        protected void init() {
            this.textBox_distance.Text = this.default_distance.ToString();//设置默认的孤立距离
            this.dataGridView_separateElement.ReadOnly = true;//设置数据表只读
            this.dataGridView_separateElement.AllowUserToAddRows = false;//不显示最下面的新行
            this.dataGridView_separateElement.AllowUserToDeleteRows = false;//不允许用户删除行
            this.dataGridView_separateElement.RowHeadersVisible = false;//设置行标题不可见
            this.dataGridView_separateElement.SelectionMode = DataGridViewSelectionMode.FullRowSelect;//单击选中整行
            this.dataGridView_separateElement.AllowUserToResizeColumns = true;//允许用户调整列宽
            this.dataGridView_separateElement.AllowUserToResizeRows = false;//禁止用户调整行高
            this.comboBox_tiaojian.Text = "全部";
        }
        /// <summary>
        /// 初始化列头名称
        /// TODO 可以选择列头数据源？
        /// </summary>
        private void initColumsName() {
            this.columnsName.Add("序号");
            this.columnsName.Add("元素ID");
            this.columnsName.Add("元素类型");
            this.columnsName.Add("描述");

            //创建列头
            int colNum = this.columnsName.Count;
            for (int i = 0; i < colNum; i++)
            {
                this.dataGridView_separateElement.Columns.Add(this.columnsName[i], this.columnsName[i]);
                this.dataGridView_separateElement.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;//不允许用户列排序
            }
            int colcount = 0;
            this.dataGridView_separateElement.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;//自动填充到容器宽
            this.dataGridView_separateElement.Columns[colcount++].FillWeight = 10;
            this.dataGridView_separateElement.Columns[colcount++].FillWeight = 15;
            this.dataGridView_separateElement.Columns[colcount++].FillWeight = 20;
            this.dataGridView_separateElement.Columns[colcount++].FillWeight = 55;

        }
        /// <summary>
        /// 获取数据
        /// 将获取到的数据传给 datagridview 让其显示
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_search_Click(object sender, EventArgs e)
        {
            string tiaojian = this.comboBox_tiaojian.Text;
            this.setDataByTiaojian(tiaojian);
        }
        /// <summary>
        /// 根据筛选条件查找数据
        /// </summary>
        /// <param name="tiaojian"></param>
        private void setDataByTiaojian(string tiaojian) {
            ElementClear elementClear = new ElementClear();
            List<Element> elements = new List<Element>();
            string distance = this.textBox_distance.Text;
            if (CutOffPipeForm.isPositiveIntegerUnlimited(distance))
            {
                this.default_distance = Convert.ToDouble(distance);
                switch (tiaojian)
                {
                    case "全部":
                        elements = ElementClear.addElementListNorepeat(elementClear.filterElementByConnection(), elementClear.filterElementByDistance(this.default_distance));
                        break;
                    case "连接性":
                        elements = elementClear.filterElementByConnection();
                        break;
                    case "距离":
                        elements = elementClear.filterElementByDistance(this.default_distance);
                        break;
                    default:
                        break;
                }
                this.setElementDataToDataGridView(elements);
            }
            else
            {
                MessageBox.Show("请输入合法的字符串");
            }
        }
        /// <summary>
        /// 将获取的数据传给 datagridview
        /// </summary>
        public void setElementDataToDataGridView(List<Element> elements) {
            //清空 dataGridView 行
            this.dataGridView_separateElement.Rows.Clear();
            if (elements == null || elements.Count == 0) return;
            int rowCount = 0;
            int colCount = 0;
            //填充行
            for (int i = 0; i < elements.Count; i++)
            {
                List<string> rowData = new List<string>();
                rowData.Add((i + 1).ToString());
                rowData.Add(elements[i].ElementId.ToString());
                string elementTypeName = OPM_Public_Api.getBMECObjectTypeName(elements[i]);
                rowData.Add(elementTypeName);
                rowData.Add(elements[i].Description);
                rowCount = this.dataGridView_separateElement.Rows.Add();
                foreach (var coldata in rowData)
                {
                    this.dataGridView_separateElement.Rows[rowCount].Cells[colCount++].Value = coldata;
                }
                colCount = 0;
            }
        }
        /// <summary>
        /// 定位元素
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_locate_Click(object sender, EventArgs e)
        {
            DataGridViewSelectedRowCollection selectedRows = this.dataGridView_separateElement.SelectedRows;
            if (selectedRows.Count == 1)
            {
                string elementIdStr = selectedRows[0].Cells[1].Value.ToString();//TODO 这个不能这么写死
                ElementClear.locateElement(Convert.ToInt64(elementIdStr));
            }
            else
            {
                MessageBox.Show("请选择单行！");
            }
        }
        /// <summary>
        /// 从当前 Model 中删除选中的行对应的元素
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_delete_Click(object sender, EventArgs e)
        {
            DataGridViewSelectedRowCollection selectedRows = this.dataGridView_separateElement.SelectedRows;
            List<long> elementIds = new List<long>();//被选中行的元素的 ElementId
            foreach (var row in selectedRows)
            {
                string elementIdStr = ((DataGridViewRow)row).Cells[1].Value.ToString();//TODO 不能写死
                elementIds.Add(Convert.ToInt64(elementIdStr));
            }
            ElementClear.deleteElement(elementIds);
            this.refreshDataGridView();
        }
        /// <summary>
        /// 刷新 DataGridView 中的数据，不应该这么刷新，这相当于重查了一遍，很浪费时间。
        /// </summary>
        private void refreshDataGridView() {
            string tiaojian = this.comboBox_tiaojian.Text;
            this.setDataByTiaojian(tiaojian);
        }
        /// <summary>
        /// 更新连接性
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_update_connection_Click(object sender, EventArgs e)
        {
            DataGridViewSelectedRowCollection selectedRows = this.dataGridView_separateElement.SelectedRows;
            List<long> elementIds = new List<long>();
            foreach (var row in selectedRows)
            {
                string elementIdStr = ((DataGridViewRow)row).Cells[1].Value.ToString();//TODO 不能写死
                elementIds.Add(Convert.ToInt64(elementIdStr));
            }
            foreach (var elementId in elementIds)
            {
                ElementClear.updateConnectionOfAllECInstance(elementId);
            }
            this.refreshDataGridView();
        }

        private void comboBox_tiaojian_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox temp = (ComboBox)sender;
            if (temp.Text == "连接性")
            {
                this.textBox_distance.Enabled = false;
            }
            else
            {
                this.textBox_distance.Enabled = true;
            }
        }
    }
}
